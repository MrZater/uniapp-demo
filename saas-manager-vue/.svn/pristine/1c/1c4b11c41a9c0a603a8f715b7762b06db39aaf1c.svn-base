import {
  login,
  logout,
  getInfo
} from '@/api/user'
import {
  getToken,
  setToken,
  removeToken
} from '@/utils/auth'
import router, {
  resetRouter
} from '@/router'

const state = {
  token: getToken(),
  username: '',
  roles: [],
  menus: [],
  passWord: '',
  loginId: '',
  skip: null,
  creative: null,
  mediaAccess: 0, //媒体权限
  company: '', // 公司
  contact: '', // 联系人
  mobile: '', // 手机号
  unReadMessage: '', // 是否有未读消息
  mainApp: '',
  learnWay: '',
  allowOperate: false,
  allowDownload: false
}

const mutations = {

  SET_TOKEN: (state, token) => {
    state.token = token
  },
  SET_NAME: (state, name) => {
    state.username = name
  },
  SET_ROLES: (state, roles) => {
    state.roles = roles

  },
  SET_MENUS: (state, menus) => {
    state.menus = menus
  },
  SET_PASSWORD(state, passWord) {
    state.passWord = passWord
  },
  SET_LOGINID(state, loginId) {
    state.loginId = loginId
  },
  SET_SKIP(state, skip) {
    state.skip = skip
  },
  SET_CREATIVE(state, creative) {
    state.creative = creative
  },
  SET_MEDIAACCESS: (state, mediaAccess) => {
    state.mediaAccess = mediaAccess
  },
  SET_COMPANY: (state, company) => {
    state.company = company
  },
  SET_CONTACT: (state, contact) => {
    state.contact = contact
  },
  SET_MOBILE: (state, mobile) => {
    state.mobile = mobile
  },
  SET_UNREADMESSAGE: (state, unReadMessage) => {
    state.unReadMessage = unReadMessage == '1' ? true : false
  },
  SET_MAINAPP: (state, mainApp) => {
    state.mainApp = mainApp
  },

  SET_LEARNWAY: (state, learnWay) => {
    state.learnWay = learnWay
  },
  SET_ALLOWOPERATE: (state, role) => {
    state.allowOperate = role == 'MANAGEMENT' ?
      false : role == 'BUSINESS_DIRECTOR' ?
      false : role == 'OPERATOR_DIRECTOR' ?
      false : true
  },
  SET_ALLOWDOWNLOAD: (state, role) => {
    state.allowDownload = role == 'MANAGEMENT' ?
      false : role == 'BUSINESS_DIRECTOR' ?
      false : role == 'OPERATOR_DIRECTOR' ?
      false : true
  }
}

const actions = {
  // user login
  login({
    commit
  }, userInfo) {
    const {
      username,
      password,
      uuid,
      code
    } = userInfo
    return new Promise((resolve, reject) => {
      login({
        username: username.trim(),
        password: password,
        uuid: uuid,
        code: code
      }).then(response => {
        const {
          data
        } = response
        commit('SET_TOKEN', data)
        setToken(data)
        resolve(response)
      }).catch(error => {
        reject(error)
      })
    })
  },

  // get user info
  getInfo({
    commit,
    state
  }) {
    return new Promise((resolve, reject) => {
      getInfo().then(response => {
        const {
          data
        } = response
        if (!data) {
          reject('Verification failed, please Login again.')
        }

        const {
          roles,
          username,
          menus,
          passWord,
          loginId,
          skip,
          creative,
          mediaAccess,
          company,
          contact,
          mobile,
          unReadMessage,
          mainApp,
          learnWay
        } = data



        // roles must be a non-empty array
        if (!roles || roles.length <= 0) {
          reject('getInfo: roles must be a non-null array!')
        }
        commit('SET_ROLES', roles)
        commit('SET_NAME', username)
        commit('SET_MENUS', menus)
        commit('SET_PASSWORD', passWord)
        commit('SET_LOGINID', loginId)
        commit('SET_SKIP', skip)
        commit('SET_CREATIVE', creative)
        commit('SET_MEDIAACCESS', mediaAccess)
        commit('SET_COMPANY', company)
        commit('SET_CONTACT', contact)
        commit('SET_MOBILE', mobile)
        commit('SET_UNREADMESSAGE', unReadMessage)
        commit('SET_MAINAPP', mainApp)
        commit('SET_LEARNWAY', learnWay)
        commit('SET_ALLOWOPERATE', roles[0])
        commit('SET_ALLOWDOWNLOAD', roles[0])
        resolve(data)
      }).catch(error => {
        reject(error)
      })
    })
  },

  // user logout
  logout({
    commit,
    state,
    dispatch
  }) {
    return new Promise((resolve, reject) => {
      logout(state.token).then((res) => {
        commit('SET_TOKEN', '')
        commit('SET_ROLES', [])
        commit('SET_MENUS', [])
        removeToken()
        resetRouter()

        resolve()
      }).catch(error => {
        reject(error)
      })
    })
  },

  // remove token
  resetToken({
    commit
  }) {
    return new Promise(resolve => {
      commit('SET_TOKEN', '')
      commit('SET_ROLES', [])
      commit('SET_MENUS', [])
      removeToken()
      resolve()
    })
  },

  // dynamically modify permissions
  changeRoles({
    commit,
    dispatch
  }, role) {
    return new Promise(async resolve => {
      const token = role + '-token'

      commit('SET_TOKEN', token)
      setToken(token)

      const {
        roles
      } = await dispatch('getInfo')
      resetRouter()

      // generate accessible routes map based on roles
      const accessRoutes = await dispatch('permission/generateRoutes', roles, {
        root: true
      })

      // dynamically add accessible routes
      router.addRoutes(accessRoutes)

      resolve()
    })
  }
}

export default {
  namespaced: true,
  state,
  mutations,
  actions
}