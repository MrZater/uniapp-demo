<template>
  <div class="dashboard-editor-container">
    <dataList ref="dataList" />
    <div class="search_chart">
      <div class="left">
        <div class="filter-container">
          <!-- 日期 -->
          <el-date-picker
            v-model="time"
            :clearable="false"
            class="filter-item"
            type="daterange"
            value-format="yyyy-MM-dd"
            align="left"
            unlink-panels
            range-separator="至"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            :picker-options="pickerOptions"
            style="width: 240px"
            @change="getSTime"
          />
          <!-- 商务 -->
          <el-select
            v-show="false"
            v-model="echartsParams.businessIds[0]"
            :disabled="$store.state.user.roles[0] === 'BUSINESS'"
            class="filter-item"
            clearable
            placeholder="请选择商务"
          >
            <el-option
              v-for="item in businessList"
              :key="item.id"
              :label="item.username"
              :value="item.id"
            />
          </el-select>
          <!-- 账号 -->
          <CustSelectOne
            v-if="
              $store.state.user.roles[0] === 'SUPER_ADMIN' ||
                $store.state.user.roles[0] === 'BUSINESS' ||
                $store.state.user.roles[0] == 'TECHNOLOGY' ||
                $store.state.user.roles[0] == 'MANAGEMENT' ||
                $store.state.user.roles[0] == 'BUSINESS_DIRECTOR' ||
                $store.state.user.roles[0] == 'OPERATOR_DIRECTOR'
            "
            class="filter-item"
            style="width: 240px"
            :model="echartsParams.adminUserIds[0]"
            :all-data="adminList"
            :width="240"
            word="账户"
            :clear="true"
            @handleSelect="handleSelectAdmin"
          />

          <!-- 应用1 -->
          <CustSelectApp
            class="filter-item"
            style="width: 240px"
            :word="'应用'"
            :width="450"
            :all-data="departments1"
            :search-by-id="true"
            @selectListhandle="selectListhandleApp"
          />
          <!-- 广告位 -->
          <CustSelectApp
            v-show="false"
            class="filter-item"
            style="width: 240px"
            :word="'广告位'"
            :width="450"
            :all-data="departments2"
            :search-by-id="true"
            @selectListhandle="selectListhandlePlace"
          />
          <!-- 广告样式 -->
          <el-select
            v-model="echartsParams.positionIdList"
            style="width: 240px"
            class="filter-item"
            multiple
            collapse-tags
            placeholder="请选择广告样式"
          >
            <el-option
              v-for="item in options1"
              :key="item.value"
              :label="item.name"
              :value="item.id"
            />
          </el-select>
          <!-- 广告源-->
          <CustSelectApp
            style="width: 240px"
            class="filter-item"
            :word="'广告源'"
            :width="450"
            :all-data="departments3"
            @selectListhandle="selectListhandlePlat"
          />
          <!-- 系统平台 -->
          <el-select
            v-show="false"
            v-model="echartsParams.osIdList"
            style="width: 240px"
            class="filter-item"
            multiple
            placeholder="请选择系统平台"
          >
            <el-option
              v-for="item in systemPlatformOptions"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            />
          </el-select>
          <el-button
            class="filter-item"
            type="primary"
            icon="el-icon-search"
            @click="handleSearch"
          >
            查询
          </el-button>
        </div>

        <div class="earcth">
          <div class="control">
            <el-select
              v-model="checkList[0]"
              placeholder=""
              collapse-tags
              size="mini"
              style="width: 150px"
              @change="changeEcharts"
            >
              <div
                slot="prefix"
                style="height: 35px; line-height: 24px; font-size: 20px"
              >
                <svg-icon
                  :style="{ color: getLineColor(checkList[0]) }"
                  icon-class="line"
                />
              </div>
              <template v-for="(item, index) in targetList">
                <el-option
                  :key="index"
                  :disabled="item.value == checkList[1]"
                  :value="item.value"
                  :label="item.label"
                />
              </template>
            </el-select>
            <el-select
              v-model="checkList[1]"
              placeholder=""
              collapse-tags
              size="mini"
              style="width: 150px"
              @change="changeEcharts"
            >
              <div
                slot="prefix"
                style="height: 35px; line-height: 24px; font-size: 20px"
              >
                <svg-icon
                  :style="{ color: getLineColor(checkList[1]) }"
                  icon-class="line"
                />
              </div>
              <template v-for="(item, index) in targetList">
                <el-option
                  :key="index"
                  :disabled="item.value == checkList[0]"
                  :value="item.value"
                  :label="item.label"
                />
              </template>
            </el-select>
          </div>
          <div ref="box" v-loading="loadingEcharts" class="eartch_left" />
        </div>
      </div>
      <div class="right">
        <pieChart />
      </div>
    </div>

    <div class="table">
      <div class="showbox">
        <h2>数据维度</h2>
        <el-checkbox
          v-if="
            $store.state.user.roles[0] === 'SUPER_ADMIN' ||
              $store.state.user.roles[0] === 'BUSINESS'
          "
          v-model="showTable.account"
          medium
        >
          <h3>账户名称</h3>
        </el-checkbox>
        <el-checkbox v-show="false" v-model="showTable.business" medium>
          <h3>商务名称</h3>
        </el-checkbox>
        <el-checkbox v-model="showTable.appname" medium>
          <h3>应用名称</h3>
        </el-checkbox>
        <el-checkbox v-model="showTable.os" medium>
          <h3>操作系统</h3>
        </el-checkbox>
      </div>
      <div v-if="tableList.length > 0" class="table_box">
        <el-table
          :key="tableKey"
          v-loading="loading"
          :header-cell-style="{ 'background-color': '#f7f8fa', color: '#000' }"
          stripe
          :data="tableList"
          style="width: 100%"
          @sort-change="sortChange"
        >
          <el-table-column
            align="center"
            fixed
            prop="date"
            min-width="120px"
            label="日期"
          />
          <el-table-column
            v-if="showTable.account"
            align="center"
            fixed
            width="180px"
            prop="adminUserId"
            label="账户名称"
          >
            <template slot-scope="{ row }">
              {{ row.adminUser !== undefined ? row.adminUser : "-" }}
            </template>
          </el-table-column>
          <el-table-column
            v-if="showTable.appname"
            align="center"
            fixed
            width="150px"
            prop="appName"
            label="应用名称"
          >
            <template slot-scope="{ row }">
              <svg-icon
                :icon-class="
                  row.os === 1 ? 'android' : row.os === 0 ? 'ios' : ''
                "
              />
              {{ row.appName ? row.appName : "-" }}
            </template>
          </el-table-column>
          <el-table-column
            v-if="showTable.os"
            align="center"
            fixed
            width="150px"
            prop="os"
            label="操作系统"
          >
            <template slot-scope="{ row }">
              {{ row.os == 1 ? "Android" : row.os == 0 ? "IOS" : "-" }}
            </template>
          </el-table-column>
          <el-table-column
            align="center"
            width="150px"
            prop="dau"
            label="DAU"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.dau }}
            </template>
          </el-table-column>
          <el-table-column
            v-if="!hasPlatIdList"
            align="center"
            width="150px"
            prop="deu"
            label="DEU"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.deu }}
            </template>
          </el-table-column>
          <el-table-column
            v-if="!hasPlatIdList"
            align="center"
            width="150px"
            prop="permeability"
            label="渗透率"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.permeability + "%" }}
            </template>
          </el-table-column>
          <el-table-column
            align="center"
            width="150px"
            prop="unitRevenue"
            label="收益"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.unitRevenue ? row.unitRevenue : "0" }}
            </template>
          </el-table-column>
          <el-table-column
            align="center"
            width="150px"
            prop="arpu"
            label="ARPDAU"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.arpu ? row.arpu : "0" }}
            </template>
          </el-table-column>
          <el-table-column
            align="center"
            width="150px"
            prop="arpDeu"
            label="ARPDEU"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.arpDeu ? row.arpDeu : "0" }}
            </template>
          </el-table-column>

          <el-table-column
            v-if="!hasPlatIdList"
            align="center"
            width="150px"
            prop="request"
            label="流量请求"
            :sortable="'custom'"
            :render-header="renderHeader"
          />
          <el-table-column
            align="center"
            width="150px"
            prop="impress"
            label="展示"
            :sortable="'custom'"
            :render-header="renderHeader"
          />
          <el-table-column
            align="center"
            width="150px"
            prop="aipau"
            label="展示 / DAU"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.aipau == 0 ? 0 : (row.aipau + 0).toFixed(2) }}
            </template>
          </el-table-column>
          <el-table-column
            v-if="!hasPlatIdList"
            align="center"
            width="150px"
            prop="aipu"
            label="展示 / DEU"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.aipu == 0 ? 0 : (row.aipu + 0).toFixed(2) }}
            </template>
          </el-table-column>

          <el-table-column
            align="center"
            width="150px"
            prop="income"
            label="预估收益"
            :sortable="'custom'"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{ row.income == 0 ? 0 : (row.income + 0).toFixed(2) }}
            </template>
          </el-table-column>
          <el-table-column
            align="center"
            width="150px"
            prop="estimatedRevenueEcpm"
            label="预估eCPM"
            :sortable="'custom'"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{
                row.estimatedRevenueEcpm == 0
                  ? 0
                  : (row.estimatedRevenueEcpm + 0).toFixed(2)
              }}
            </template>
          </el-table-column>

          <el-table-column
            align="center"
            width="150px"
            prop="unitEcpm"
            label="eCPM"
            :render-header="renderHeader"
          >
            <template slot-scope="{ row }">
              {{
                row.unitEcpm == 0
                  ? 0
                  : row.unitEcpm
                    ? (+row.unitEcpm).toFixed(2)
                    : "-"
              }}
            </template>
          </el-table-column>
        </el-table>
        <el-pagination
          v-if="tableList.length > 0"
          style="margin: 30px 0 0 0"
          :current-page="echartsParams.page"
          :page-sizes="[5, 10, 20, 50]"
          :page-size="echartsParams.limit"
          layout="total,sizes,prev,pager,next,jumper"
          :total="totalCount"
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
        />
      </div>

      <Empty v-else />
    </div>
  </div>
</template>

<script>
import dataList from './components/dataList'
import pieChart from './components/pieChart'
import {
  incomeData,
  homeEcharts,
  getBusinessList,
  getTableList
} from '@/api/index'
import { getPlaceList } from '@/api/place'
import {
  getAppList,
  getAdminAndAppListByBusinessId,
  getAppListByAdminId
} from '@/api/app'
import { getPositionList } from '@/api/common'
import { toDate } from '@/utils/toTimer'
import { appToAdvert } from '@/api/synthReport'
const echarts = require('echarts')
import CustSelectApp from '@/components/CustSelectApp'
import CustSelectOne from '@/components/CustSelectOne'

import { getPlatOptions } from '@/api/plat'

import Empty from '@/components/empty'
import { adminEchartsOption, adminDateOption } from '@/utils/options'
import tips from '@/components/tips/HelpHint/HelpHint.vue'

export default {
  name: 'Admin',
  components: {
    dataList,
    CustSelectApp,
    CustSelectOne,
    Empty,
    tips,
    pieChart
  },
  data() {
    return {
      iscreat: true,
      myEcharts: {},
      loadingEcharts: false,
      echartsParams: {
        adminUserIds: [],
        businessIds: [],
        dateStart: '',
        dateEnd: '',
        appIdList: [], // 应用id数组
        appIdListExclude: 1,
        placeIdList: [],
        placeIdListExclude: 1,
        positionIdList: [],
        positionIdListExclude: 1,
        platIdList: [],
        platIdListExclude: 1,
        osIdList: [],
        osIdListExclude: 1,
        groupByList: ['a.date'],
        limit: 10,
        page: 1
      },
      time: [],
      income: {
        beforeYesterday: 0,
        beforeYesterdayLabel: '',
        lastMonth: 0,
        lastMonthLabel: '',
        month: 0,
        monthLabel: '',
        yesterday: 0,
        yesterdayLabel: ''
      },

      chartOption: {},
      chartData: null,
      pickerOptions: adminDateOption,
      checkList: ['unitRevenue', 'dau'],
      ecjartsList: [],
      nodataOption: {},
      option: adminEchartsOption,
      departments1: [], // 应用 全部数据数组
      department1: [], // 应用 选中数据
      options1: [],
      options2: [],
      departments2: [],
      departments3: [],
      department2: [],
      department3: [],
      selfstyle: {
        textAlign: 'right',
        paddingRight: '10px'
      },
      appOptions: [],
      adverStyleOptions: [],
      systemPlatformOptions: [
        { label: 'Android', value: '1' },
        { label: 'IOS', value: '0' }
      ],
      adverStyleVal: '',
      systemPlatform: [],
      businessList: [],
      adminList: [],
      // table列表数据
      tableList: [],
      sum: {},
      // table列表加载中
      loading: false,
      showTable: {
        account: false,
        business: false,
        os: false,
        appname: false
      },
      timer: null,
      // 分页器
      totalCount: 1,
      // table对照列表
      businessListforTable: [],
      adminListforTable: [],
      hasPlatIdList: false,
      targetList: [
        { label: 'DAU', value: 'dau', color: '#ffab31' },
        { label: 'DEU', value: 'deu', color: 'rgb(76, 180, 231)' },
        { label: '收益', value: 'unitRevenue', color: '#de7af9' },
        { label: 'eCPM', value: 'ecpm', color: 'rgb(0, 118, 143)' },
        { label: 'ARPDAU', value: 'arpu', color: '#ff746c' },
        { label: 'ARPDEU', value: 'arpDeu', color: '#ff4400' },
        { label: '预估收益', value: 'estimatedRevenue', color: '#39da61' },
        { label: '预估eCPM', value: 'estimatedRevenueEcpm', color: '#ff6688' },
        { label: '流量请求', value: 'request', color: 'rgb(145, 78, 0)' },
        { label: '展示', value: 'impression', color: '#0055ff' },
        { label: '展示 / DAU', value: 'aipau', color: '#a8a8ff' },
        { label: '渗透率', value: 'permeability', color: 'rgb(255, 192, 159)' },
        { label: '展示 / DEU', value: 'aipu', color: 'rgb(59, 203, 213)' }
      ],
      tableKey: new Date().getTime()
    }
  },
  computed: {
    title() {
      return this.$store.getters.title
    }
  },
  watch: {
    'echartsParams.adminUserIds': {
      handler(val) {
        if (val[0] === '') {
          this.echartsParams.adminUserIds = []
        }
        if (!val) {
          this.getAdminAndAppListByBusinessId({
            businessId: this.echartsParams.businessIds[0]
          })
        }
        this.getAppListByAdminId({ id: this.echartsParams.adminUserIds[0] })
      }
    },
    departments1: {
      handler(val) {
        if (val.length > 0) {
          let arr = val.map((item) => {
            return item.id
          })
          this.appToAdvert(arr)
        } else {
          this.departments2 = []
        }
      }
    },
    showTable: {
      handler(val) {
        if (this.timer) {
          clearTimeout(this.timer)
          this.timer = null
        }
        this.timer = setTimeout(() => {
          this.handleSearch()
        }, 600)
      },
      deep: true
    }
  },
  created() {},
  beforeDestroy() {
    window.removeEventListener('resize', this.getSize)
  },
  async mounted() {
    this.getDate()
    await this.getListforTable()
    this.getIncome()
    this.echartsInit()
    this.getApp()
    this.getPlace()
    this.getPosition()
    this.getPlatOptionList()
    this.getBusinessList()
    this.getHomeEcharts()
    this.getTableList()
    this.nodataOption = Object.assign({}, this.option)
    window.addEventListener('resize', this.getSize)
    this.getSize()
  },
  methods: {
    sortChange({ column, prop, order }) {
      if (order) {
        this.echartsParams.prop =
          prop == 'request'
            ? 1
            : prop == 'income'
              ? 5
              : prop == 'estimatedRevenueEcpm'
                ? 6
                : prop == 'impress'
                  ? 8
                  : ''
        this.echartsParams.order = order == 'ascending' ? 'asc' : 'desc'
      } else {
        this.echartsParams.prop = null
        this.echartsParams.order = null
      }

      this.getTableList()
    },
    getLineColor(prop) {
      let color = ''
      this.targetList.forEach((item) => {
        if (item.value == prop) {
          color = item.color
        }
      })
      return color
    },
    // 渲染table表头提示
    renderHeader(h, { column, $index }) {
      // DAU
      if (column.property === 'dau') {
        return this.$createElement('tips', {
          props: {
            content: `每天打开应用的独立用户数`,
            title: column.label,
            isShow: true
          }
        })
      }
      // DEU
      if (column.property === 'deu') {
        return this.$createElement('tips', {
          props: {
            content: `每天观看过广告的独立用户数`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 渗透率
      if (column.property === 'permeability') {
        return this.$createElement('tips', {
          props: {
            content: `每天观看过广告的用户占比，渗透率=DEU/DAU`,
            title: column.label,
            isShow: true
          }
        })
      }
      // ARPDAU
      if (column.property === 'arpu') {
        return this.$createElement('tips', {
          props: {
            content: `ARPDAU = 收益 / DAU`,
            title: column.label,
            isShow: true
          }
        })
      }
      // ARPDEU
      if (column.property === 'arpDeu') {
        return this.$createElement('tips', {
          props: {
            content: `ARPDEU = 收益 / DEU`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 展示/DAU
      if (column.property === 'aipau') {
        return this.$createElement('tips', {
          props: {
            content: `人均展示次数`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 展示/DEU
      if (column.property === 'aipu') {
        return this.$createElement('tips', {
          props: {
            content: `观看过广告的用户人均展示次数`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 流量请求
      if (column.property === 'request') {
        return this.$createElement('tips', {
          props: {
            content: `应用向${this.title}发送请求的次数，一次流量请求可能触发多次广告请求`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 流量填充率
      if (column.property === 'requestFilledRate') {
        return this.$createElement('tips', {
          props: {
            content: `应用向${this.title}发送请求后，响应成功的占比`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 预估收益
      if (column.property === 'income') {
        return this.$createElement('tips', {
          props: {
            content: `预估收益=SUM(代码位人工填写的eCPM价格*${this.title}统计的展示/1000)`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 预估eCPM
      if (column.property === 'estimatedRevenueEcpm') {
        return this.$createElement('tips', {
          props: {
            content: `（预估收益/${this.title}统计的展示）*1000`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 展示
      if (column.property === 'impress') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}统计的广告曝光次数，由于统计口径差异、网络丢包等因素，${this.title}统计的展示数据与广告平台展示数据可能存在差异`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 展示率
      if (column.property === 'impressRate') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}收到来自广告平台的广告返回后，展示成功的占比。公式为 展示率 = (展示/填充)`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 点击
      if (column.property === 'click') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}统计的广告点击数，由于部分广告平台不提供点击回调，${this.title}统计的点击数据与广告平台点击数据可能存在差异`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 点击率
      if (column.property === 'clickRate') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}统计的点击率，点击率=点击数/展示数`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 展示Gap
      if (column.property === 'impressionGap') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}统计展示与广告平台统计展示的差异，公式为 展示Gap=(展示-展示API)/展示API`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 点击Gap
      if (column.property === 'clickGap') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}统计点击与广告平台统计点击的差异，公式为 点击Gap=(点击-点击API)/点击API`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 收益
      if (column.property === 'unitRevenue') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}通过Reporting API向广告平台拉取到的收益`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 展示API
      if (column.property === 'unitImpression') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}通过Reporting API向广告平台拉取到的展示`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 点击API
      if (column.property === 'unitClick') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}通过Reporting API向广告平台拉取到的点击`,
            title: column.label,
            isShow: true
          }
        })
      }
      // eCPM
      if (column.property === 'unitEcpm') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}通过Reporting API向广告平台拉取到的收益和展示API计算出eCPM API，公式：（收益/展示API）*1000`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 点击率API
      if (column.property === 'unitCtr') {
        return this.$createElement('tips', {
          props: {
            content: `点击API/展示API`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 请求API
      if (column.property === 'unitRequest') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}通过Reporting API向广告平台拉取到的广告请求数，部分平台不提供此数据`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 填充率API
      if (column.property === 'unitFilledRate') {
        return this.$createElement('tips', {
          props: {
            content: `${this.title}通过Reporting API向广告平台拉取到的填充率，部分平台不提供此数据`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 聚合-请求
      if (column.property === 'advRequest') {
        return this.$createElement('tips', {
          props: {
            content: `汇总行表示流量请求，即应用向${this.title}发起请求的次数；其他行表示广告请求，即${this.title}向广告平台发起请求的次数`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 聚合-填充率
      if (column.property === 'advRequestFilledRate') {
        return this.$createElement('tips', {
          props: {
            content: `汇总行表示流量填充率，即应用向${this.title}发送请求后返回成功的占比；其余行表示广告填充率，即${this.title}向广告平台发送请求后返回成功的占比`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 新用户
      if (column.property === 'newLogin') {
        return this.$createElement('tips', {
          props: {
            content: `首次使用应用的用户数`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 新用户占比
      if (column.property === 'newUserRate') {
        return this.$createElement('tips', {
          props: {
            content: `首次使用应用的用户占比，计算公式：新增用户/DAU`,
            title: column.label,
            isShow: true
          }
        })
      }
      // 其他
      return this.$createElement('tips', {
        props: {
          content: ``,
          title: column.label,
          isShow: false
        }
      })
    },
    async getListforTable() {
      let response = await getAdminAndAppListByBusinessId({ businessId: '' })
      if (response.code !== 200) return
      this.adminListforTable = response.data.adminList
    },
    // 应用列表改变时获取广告位数据
    appToAdvert(data) {
      if (data.length === 0) {
        return
      }
      appToAdvert(data).then((res) => {
        this.departments2 = res.data
      })
    },
    // 广告源
    selectListhandlePlat(val) {
      this.echartsParams.platIdList = [...val]
    },
    // 广告位
    selectListhandlePlace(val) {
      this.echartsParams.placeIdList = [...val]
    },
    handleSelectAdmin(val) {
      if (val) {
        this.echartsParams.adminUserIds = [val]
      } else {
        this.echartsParams.adminUserIds = []
      }
    },
    // 应用
    selectListhandleApp(val) {
      this.echartsParams.appIdList = [...val]
      if (val.length > 0) {
        this.appToAdvert(val)
      } else {
        let arr = this.departments1.map((item) => {
          return item.id
        })
        this.appToAdvert(arr)
      }
    },

    // 改变也容量
    handleSizeChange(val) {
      this.echartsParams.limit = val
      this.echartsParams.page = 1

      this.getTableList()
    },
    handleCurrentChange(val) {
      this.echartsParams.page = val
      this.getTableList()
    },
    // 获取table列表数据
    async getTableList() {
      this.hasPlatIdList = false
      if (this.echartsParams.platIdList.length > 0) {
        this.hasPlatIdList = true
        if (
          this.checkList[0] != 'deu' &&
          this.checkList[0] != 'request' &&
          this.checkList[0] != 'permeability' &&
          this.checkList[0] != 'aipu'
        ) {
          this.checkList[0] = 'deu'
        }
        if (
          this.checkList[1] != 'deu' &&
          this.checkList[1] != 'request' &&
          this.checkList[1] != 'permeability' &&
          this.checkList[1] != 'aipu'
        ) {
          if (this.checkList[0] == 'deu') {
            this.checkList[1] = 'request'
          } else {
            this.checkList[1] = 'deu'
          }
        }
      }
      this.loading = true
      if (
        !this.echartsParams.groupByList.includes('app.admin_user') &&
        this.showTable.account
      ) {
        this.echartsParams.groupByList.push('app.admin_user')
      }
      if (
        !this.echartsParams.groupByList.includes('u.business_id') &&
        this.showTable.business
      ) {
        this.echartsParams.groupByList.push('u.business_id')
      }
      if (
        !this.echartsParams.groupByList.includes('app.os') &&
        this.showTable.os
      ) {
        this.echartsParams.groupByList.push('app.os')
      }
      if (
        !this.echartsParams.groupByList.includes('a.app_id') &&
        this.showTable.appname
      ) {
        this.echartsParams.groupByList.push('a.app_id')
      }
      let resp = await getTableList(this.echartsParams)

      this.echartsParams.groupByList = ['a.date']

      if (resp.code !== 200) return
      if (!resp.data) {
        this.tableList = []
        this.loading = false

        return
      }
      if (resp.data.items.length === 0) {
        this.tableList = []
        return
      }

      this.sum = resp.data.aggregate
      this.sum.date = '汇总'
      this.sum.os = '-'

      this.tableList = resp.data.items

      for (let i = 0; i < this.adminListforTable.length; i++) {
        for (let j = 0; j < this.tableList.length; j++) {
          if (this.adminListforTable[i].id === this.tableList[j].adminUserId) {
            this.tableList[j].adminUser = this.adminListforTable[i].username
          }
          if (this.tableList[j].adminUserId === 1) {
            this.tableList[j].adminUser = '超级管理员'
          }
        }
      }
      this.totalCount = resp.data.total

      this.tableList.unshift(this.sum)
      this.loading = false
      this.tableKey = new Date().getTime()
      // this.$bus.$emit("totop");
    },
    // 获取商务列表
    async getBusinessList() {
      let resp = await getBusinessList()
      if (resp.code !== 200) return
      this.businessList = resp.data
      if (this.$store.state.user.roles[0] === 'BUSINESS') {
        this.echartsParams.businessIds[0] = this.businessList[0].id
        this.getHomeEcharts()
        this.getAdminAndAppListByBusinessId({
          businessId: this.echartsParams.businessIds[0]
        })
      }
    },
    // 通过用户id查app列表
    async getAppListByAdminId(id) {
      if (!id.id) {
        this.getApp()
        return
      }
      let resp = await getAppListByAdminId(id)
      if (resp.code !== 200) return

      if (!resp.data) {
        this.departments1 = []
      } else {
        this.departments1 = resp.data
      }
    },
    // 通过商务id获取账户列表和应用列表
    async getAdminAndAppListByBusinessId(businessId) {
      let resp = await getAdminAndAppListByBusinessId(businessId)
      if (resp.code !== 200) return
      this.departments1 = resp.data.appList
      this.departments1 = resp.data.appList
      resp.data.adminList.forEach((item) => {
        item.name = item.company
        item.id = '' + item.id
      })
      // adminList
      this.adminList = resp.data.adminList

      for (let i = 0; i < this.adminList.length; i++) {
        for (let j = 0; j < this.tableList.length; j++) {
          if (this.adminList[i].id === this.tableList[j].adminUserId) {
            this.tableList[j].adminUser = this.adminList[i].username
          }
        }
      }
      if (this.departments1.length > 0) {
        let arr = this.departments1.map((item) => {
          if (item === null) {
            return
          } else {
            return item.id
          }
        })
      } else {
        this.departments2 = []
      }
    },
    getSize() {
      // 判断是否是created时调用
      if (!this.iscreat) {
        this.myEcharts.resize()
      }
      this.iscreat = false
    },
    getIncome() {
      incomeData().then((res) => {
        if (res.code !== 200) return this.$message.error(res.msg)
        this.$nextTick(() => {
          if (this.$refs.dataList) {
            this.$refs.dataList.initData(res.data)
          }
        })
      })
    },
    getDate() {
      // 昨天
      let today = toDate(Date.now() - 24 * 60 * 60 * 1000)
      // 13天前
      let day7Before = toDate(Date.now() - 7 * 24 * 60 * 60 * 1000)
      this.time = [day7Before, today]
      this.echartsParams.dateStart = this.time[0]
      this.echartsParams.dateEnd = this.time[1]
    },
    // 应用
    getApp() {
      if (this.echartsParams.businessIds[0] === '') {
        getAppList().then((res) => {
          if (!res.data) {
            this.departments1 = []
            return
          }
          this.departments1 = res.data
        })
      } else {
        this.getAdminAndAppListByBusinessId({
          businessId: this.echartsParams.businessIds[0]
        })
      }
    },
    // 广告位
    getPlace() {
      getPlaceList().then((res) => {
        if (res.code !== 200) return
        if (!res.data) {
          this.departments2 = []
          return
        }
        this.departments2 = res.data
      })
    },
    // 广告样式
    getPosition() {
      getPositionList().then((res) => {
        this.options1 = res.data
      })
    },
    // 广告源
    getPlatOptionList() {
      getPlatOptions().then((res) => {
        this.departments3 = res.data
      })
    },
    getSTime() {
      if (this.time) {
        this.echartsParams.dateStart = this.time[0]
        this.echartsParams.dateEnd = this.time[1]
      } else {
        this.echartsParams.dateStart = ''
        this.echartsParams.dateEnd = ''
        this.time = []
      }
    },
    handleSearch() {
      this.echartsParams.page = 1
      if (this.echartsParams.businessIds[0] === '') {
        this.echartsParams.businessIds = []
      }
      // 维度
      this.echartsParams.groupByList = []
      this.echartsParams.groupByList.push('a.date')
      // 商务维度
      if (this.showTable.business) {
        this.echartsParams.groupByList.push('u.business_id')
      }
      // 操作系统
      if (this.showTable.os) {
        this.echartsParams.groupByList.push('app.os')
      }
      // 应用名称
      if (this.showTable.appname) {
        this.echartsParams.groupByList.push('a.app_id')
      }
      // 账户名称
      if (this.showTable.account) {
        this.echartsParams.groupByList.push('app.admin_user')
      }

      this.getHomeEcharts()

      this.getTableList()
    },

    echartsInit() {
      let myEcharts = echarts.init(this.$refs.box)
      myEcharts.setOption(this.option)
      this.myEcharts = myEcharts
    },
    getHomeEcharts() {
      this.hasPlatIdList = false
      if (this.echartsParams.platIdList.length > 0) {
        this.hasPlatIdList = true
      }
      this.loadingEcharts = true
      homeEcharts(this.echartsParams).then((res) => {
        if (res.code !== 200) return
        // 无数据

        if (!res.data) {
          for (let j = 0; j < this.option.series.length; j++) {
            this.option.series[j].data = []
            this.option.series[j].name = ''
          }
          this.option = Object.assign({}, this.nodataOption)
          this.loadingEcharts = false
          this.echartsInit()
          this.ecjartsList = []
          return
        }

        setTimeout(() => {
          this.loadingEcharts = false
        }, 400)
        this.option.xAxis.data = res.data.lable
        res.data.list.forEach((e) => {
          if (e.field === 'estimatedRevenue') {
            e.data.forEach((item, index) => {
              e.data[index] = item.toFixed(2)
            })
          }
          if (e.field === 'unitRevenue') {
            e.data.forEach((item, index) => {
              e.data[index] = item.toFixed(2)
            })
          }
        })

        this.ecjartsList = res.data.list
        this.changeEcharts()
      })
    },
    changeEcharts() {
      for (let j = 0; j < this.option.series.length; j++) {
        this.option.series[j].data = []
        this.option.series[j].name = ''
      }
      for (let i = 0; i < this.checkList.length; i++) {
        for (let j = 0; j < this.ecjartsList.length; j++) {
          if (this.checkList[i] === this.ecjartsList[j].field) {
            this.option.series[j].data = this.ecjartsList[j].data
            this.option.series[j].name = this.ecjartsList[j].name
            let yAxisIndex = this.option.series[j].yAxisIndex
            // 判断改图表中显示的数据是否有三个
            if (this.checkList.length >= 3) {
              // 大于三个，刻度和数值不显示
              this.option.yAxis[yAxisIndex].position = ''
              // 刻度
              this.option.yAxis[yAxisIndex].splitLine.show = false
              this.option.yAxis[yAxisIndex].axisTick.show = false
              // 数值
              this.option.yAxis[yAxisIndex].axisLabel.show = false
              // 添加一个背景刻度线
              if (i === 0) {
                this.option.yAxis[yAxisIndex].splitLine.show = true
              }
            } else {
              // 小于三个，分别给他们加上位置、数值和刻度显示
              this.option.yAxis[yAxisIndex].axisTick.show = true
              this.option.yAxis[yAxisIndex].axisLabel.show = true

              if (i == 0) {
                // 添加一个背景刻度线
                this.option.yAxis[yAxisIndex].splitLine.show = true
                // 第一个的y坐标放在左边
                this.option.yAxis[yAxisIndex].position = 'left'
              } else if (i == 1) {
                this.option.yAxis[yAxisIndex].splitLine.show = false
                // 第二个的y坐标放在右边
                this.option.yAxis[yAxisIndex].position = 'right'
              } else {
                this.option.yAxis[yAxisIndex].splitLine.show = false
              }
            }
          }
        }
      }
      this.echartsInit()
    }
  }
}
</script>

<style lang="scss" scoped>
body {
  overflow-x: scroll;
}
.dashboard-editor-container {
  position: relative;

  .search_chart {
    box-sizing: border-box;
    width: 100%;
    display: flex;
    .right {
      width: 37%;
      margin: 0 0 15px 15px;
      background-color: #fff;
    }
    .left {
      width: 63%;
    }

    .filter-container {
      padding: 10px 10px 10px 10px;
      background-color: #fff;
      padding-bottom: 0;

      .filter-item {
        margin: 10px 5px 0px 0;
      }
    }
    .earcth {
      margin-bottom: 15px;
      width: 100%;
      padding-top: 20px;
      padding: 10px;
      background-color: #fff;
      .control {
        width: 100%;
        margin-bottom: 30px;
        margin-top: 10px;
        display: flex;
        justify-content: space-between;
        padding-right: 15px;
      }
      .eartch_left {
        width: 100%;
        height: 340px;
      }
    }
  }

  .searchTiaojian {
    width: 100%;
    background-color: red;
    margin-bottom: 15px;
  }
}
.box {
  font-size: 22px;
}
::v-deep.dashboard-editor-container .app_option.dashboard-editor-container {
  border: 1px solid #000;
  background-color: red;
  width: 400px;
}
.app_option .appsearch .search-left {
  box-sizing: border-box;
}
.app_option .appsearch .search-left .btn {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 30px;
  background-color: #fff;
  z-index: 10;
  padding-top: 5px;
  padding-left: 5px;
}
.app_option .appsearch .search-left .input {
  position: absolute;
  top: 30px;
  left: 0;
  width: 95%;
  z-index: 10;
  margin-bottom: 10px;
  margin-left: 5px;
  background-color: #fff;
  margin-bottom: 10px;
}
.app_option .appsearch .search-left .checkbox_group {
  margin-top: 70px;
  // background-color: #40c9c6;
}
.app_option .appsearch .search-left .checkbox_group li {
  display: block;
  height: 50px;
}
.app_option .appsearch .search-left .checkbox_group li::after {
  display: none;
}
.app_option .appsearch .search-left .checkbox_group .name {
  font-weight: 700;
}

// table列表
.table {
  background-color: #fff;
  padding: 30px 3% 50px 3%;
}
.showbox {
  margin: 20px 0 20px 0;
}
.showbox h2 {
  display: inline-block;
  margin: 0 20px;
  font-size: 20px;
}
.showbox .el-checkbox {
  padding-bottom: 10px;
  h3 {
    font-size: 14px;
  }
}
::v-deep.table .el-table tr:nth-of-type(1) {
  background-color: #eee;
}

::v-deep.dashboard-editor-container
  .filter-container
  .cust-select-container
  .osicon {
  display: none;
}
</style>
