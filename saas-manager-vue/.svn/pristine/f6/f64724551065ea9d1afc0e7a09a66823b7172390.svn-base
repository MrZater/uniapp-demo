<template>
  <div class="add-abtest-container">
    <el-dialog
      v-if="showTestDialog"
      :title="addAbtest ? '添加A/B分组' : 'A/B分组编辑'"
      :visible.sync="showTestDialog"
      @close="closeTestDialog"
      :destroy-on-close="true"
      :close-on-click-modal="false"
    >
      <el-form
        ref="testdialog"
        :model="testquery"
        label-width="150px"
        :rules="testRules"
      >
        <el-form-item label="应用:">
          <span>{{ appName }}</span>
        </el-form-item>
        <el-form-item label="广告位:">
          <span>{{ placeName }}</span>
        </el-form-item>
        <el-form-item label="流量分组:">
          <span>{{ group.name }}</span>
        </el-form-item>
        <el-form-item label="A/B测试名称:" prop="testName">
          <el-input
            style="width: 20rem"
            v-model="testquery.testName"
            placeholder="请输入A/B测试名称"
          ></el-input>
        </el-form-item>
        <el-form-item label="流量划分形式" prop="type">
          <el-radio-group :disabled="!addAbtest" v-model="testquery.type">
            <el-radio :label="0">请求</el-radio>
            <el-radio :label="1">用户</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="创建分组:">
          <el-button type="primary" size="mini" @click="handleAddTest"
            >添加分组</el-button
          >
        </el-form-item>
        <el-table
          border
          style="width: 42rem; margin-left: 3rem"
          :data="
            testquery.abTestList.filter((item) => {
              return item.testId !== 'default';
            })
          "
          fit
          highlight-current-row
        >
          <!-- 分组名称 -->
          <el-table-column label="分组名称" fixed align="center">
            <template slot-scope="scope">
              <el-form-item
                :prop="'abTestList.' + scope.$index + '.groupName'"
                :rules="{
                  required: true,
                  message: '分组名称不能为空',
                  trigger: 'blur',
                }"
                label-width="0"
              >
                <el-input
                  size="mini"
                  style="width: 10rem"
                  :required="true"
                  placeholder="请填写分组名称"
                  v-model="scope.row.groupName"
                >
                </el-input>
              </el-form-item>
            </template>
          </el-table-column>
          <el-table-column
            v-if="testquery.type == 1"
            label="比例"
            fixed
            align="center"
            width="80px"
            ><template slot-scope="scope">
              {{
                (testquery.abTestList[scope.$index].max
                  ? testquery.abTestList[scope.$index].max
                  : 0) -
                (testquery.abTestList[scope.$index].min
                  ? testquery.abTestList[scope.$index].min
                  : 0) +
                1 +
                "%"
              }}
            </template></el-table-column
          >
          <!-- 比例 -->
          <el-table-column
            :label="testquery.type == 0 ? '比例' : '用户区间'"
            fixed
            prop="proportion"
            align="center"
            width="250px"
            :render-header="testrenderHeader"
          >
            <template slot-scope="scope">
              <el-form-item
                v-if="testquery.type == 0"
                label-width="0"
                :prop="'abTestList.' + scope.$index + '.proportion'"
                :rules="[
                  {
                    required: true,
                    message: '比例不能为空',
                    trigger: 'blur',
                  },
                  ,
                  {
                    required: true,
                    trigger: 'blur',
                    validator: proportionValidator,
                  },
                ]"
              >
                <el-input
                  size="mini"
                  style="width: 200px"
                  prop="proportion"
                  v-model.number="scope.row.proportion"
                  placeholder="请填写比例"
                  ><span slot="suffix">%</span></el-input
                >
              </el-form-item>
              <div style="display: flex">
                <el-form-item
                  v-if="testquery.type == 1"
                  label-width="0"
                  :prop="'abTestList.' + scope.$index + '.min'"
                  :rules="[
                    {
                      required: true,
                      trigger: 'blur',
                      validator: minValidator,
                    },
                  ]"
                >
                  <el-input-number
                    size="mini"
                    style="width: 100px"
                    :min="1"
                    :max="testquery.abTestList[scope.$index].max"
                    prop="min"
                    v-model.number="scope.row.min"
                    placeholder="min"
                  ></el-input-number>
                </el-form-item>
                <el-form-item
                  v-if="testquery.type == 1"
                  label-width="0"
                  :prop="'abTestList.' + scope.$index + '.max'"
                  :rules="[
                    {
                      required: true,
                      trigger: 'blur',
                      validator: maxValidator,
                    },
                  ]"
                >
                  <el-input-number
                    size="mini"
                    prop="max"
                    :max="100"
                    :min="testquery.abTestList[scope.$index].min"
                    style="width: 100px; margin-left: 5px"
                    v-model.number="scope.row.max"
                    placeholder="max"
                  ></el-input-number>
                </el-form-item>
              </div>
            </template>
          </el-table-column>
          <!-- 操作 -->
          <el-table-column width="100" label="操作" fixed align="center">
            <template slot-scope="scope">
              <el-button
                v-if="
                  !scope.row.testId &&
                  scope.$index !== 0 &&
                  testquery.abTestList.length > 2
                "
                type="primary"
                size="mini"
                @click="closeTest(scope.$index)"
                >删除</el-button
              >
              <el-switch
                v-if="
                  scope.row.testId && (testDisabled || scope.row.sts !== 'A')
                "
                style="height: 20px"
                v-model="scope.row.sts"
                active-color="#13ce66"
                inactive-color="#ff4949"
                :active-value="'A'"
                :inactive-value="'S'"
              >
              </el-switch>
            </template>
          </el-table-column>
        </el-table>
      </el-form>
      <span slot="footer" class="dialog-footer" v-if="allowOperate">
        <el-button size="mini" @click="closeTestDialog">取消</el-button>
        <el-button size="mini" type="primary" @click="handleSubmitTestForm"
          >确定</el-button
        >
      </span>
    </el-dialog>
  </div>
</template>

<script>
import tips from "@/components/tips/HelpHint/HelpHint.vue";

import { addABTest, updateABTest } from "@/api/aggregate";

export default {
  name: "addABTestDialog",
  components: { tips },
  data() {
    return {
      testRules: {
        testName: [
          { required: true, message: "请填写测试名称", trigger: "blur" },
        ],
        type: [{ required: true, message: "请选择区分形式", trigger: "blur" }],
      },
      testquery: {},
      showTestDialog: false,
      testDisabled: false,
    };
  },
  props: {
    showTestDialogTemp: {
      type: Boolean,
      default: false,
    },
    addAbtest: {
      type: Boolean,
      default: false,
    },
    testqueryTemp: {
      type: Object,
      default: {
        placeId: "",
        groupId: "",
        testName: "",
        type: 0,
        abTestList: [
          {
            groupName: "A组",
            proportion: 50,
            testId: "",
            sts: "A",
            max: 0,
            min: 0,
          },
          {
            groupName: "B组",
            proportion: 50,
            testId: "",
            sts: "A",
            max: 0,
            min: 0,
          },
        ],
      },
    },
    appName: {
      default: "",
    },
    placeName: {
      default: "",
    },
    group: {
      type: Object,
      default: () => {},
    },
  },
  watch: {
    testqueryTemp: {
      handler(val) {
        this.testquery = JSON.parse(JSON.stringify(val));
      },
      deep: true,
    },
    showTestDialogTemp: {
      handler(val) {
        this.showTestDialog = val;
      },
    },
    testquery: {
      handler(val) {
        let num = 0;
        val.abTestList.forEach((item) => {
          if (item.sts === "A") {
            num++;
          }
        });
        if (num > 2) {
          this.testDisabled = true;
        } else {
          this.testDisabled = false;
        }
      },
      deep: true,
    },
  },
  computed: {
    allowOperate() {
      return this.$store.getters.allowOperate;
    },
  },
  methods: {
    closeTestDialog() {
      this.$emit("closeTestDialog");
    },
    // 点击添加分组
    handleAddTest() {
      if (!this.addAbtest) {
        let len = this.testquery.abTestList.length;
        this.testquery.abTestList.splice(len - 1, 0, {
          groupName: "",
          proportion: 0,
          sts: "A",
          max: 0,
          min: 0,
        });
      } else {
        this.testquery.abTestList.push({
          groupName: "",
          proportion: 0,
          sts: "A",
          max: 0,
          min: 0,
        });
      }
    },
    // 点击删除分组
    closeTest(index) {
      this.testquery.abTestList.splice(index, 1);
    },
    // ab测试弹框确定按钮
    async handleSubmitTestForm() {
      this.$refs.testdialog.validate(async (val) => {
        if (!val) return;
        // 验证比例总和
        let num = 0;
        this.testquery.abTestList.forEach((item) => {
          if (item.sts === "A") {
            let proportion = +item.proportion;
            num = +num + proportion;
          }
        });
        if (this.testquery.type == 1) {
          let arr = [];
          let sum = 0;
          this.testquery.abTestList.forEach((item, index) => {
            arr.push(item.min);
            arr.push(item.max);
            sum = sum + (item.max - item.min);
          });
          arr = arr.sort((a, b) => {
            return a - b;
          });
          let len = arr.length;
          if (this.addAbtest) {
            if (
              sum + this.testquery.abTestList.length != 100 ||
              arr[0] != 1 ||
              arr[len - 1] != 100
            ) {
              return this.$message.error("输入区间有误！");
            }
          } else {
            if (
              sum + this.testquery.abTestList.length != 101 ||
              arr[2] != 1 ||
              arr[len - 1] != 100
            ) {
              return this.$message.error("输入区间有误！");
            }
          }
        }

        if (num !== 100) {
          return this.$message.error("比例总和必须为100");
        }
        // 判断模式
        if (this.addAbtest) {
          let resp = await addABTest(this.testquery);
          if (resp.code === 200) {
            this.$message.success("添加成功！");
            this.$emit("editSuccess");
          }
        } else {
          let resp = await updateABTest(this.testquery);
          if (resp.code === 200) {
            this.$message.success("配置成功！");
            this.$emit("editSuccess");
          }
        }
      });
    },

    proportionValidator(rule, value, callback) {
      if (+value < 0) {
        callback(new Error("比例不能为负数！"));
      } else if (typeof +value !== "number") {
        callback(new Error("比例必须为数字！"));
      } else {
        callback();
      }
    },
    maxValidator(rule, value, callback) {
      var reg = /^[0-9]+$/;
      if (!value) {
        return callback(new Error("请输入最大值！"));
      } else if (!reg.test(value)) {
        return callback(new Error("请输入数字！"));
      } else {
        return callback();
      }
    },
    minValidator(rule, value, callback) {
      var reg = /^[0-9]+$/;
      if (!value) {
        return callback(new Error("请输入最小值！"));
      } else if (!reg.test(value)) {
        return callback(new Error("请输入数字！"));
      } else {
        return callback();
      }
    },
    testrenderHeader(h, { column, $index }) {
      if (this.testquery.type == 0) {
        return this.$createElement("span", "比例");
      } else if (this.testquery.type == 1) {
        return this.$createElement("tips", {
          props: {
            content:
              "对用户进行分组，每个分组配置一个数值区间，各分组数值区间不可以交叉。",
            title: "用户区间",
            isShow: true,
          },
        });
      }
    },
  },
};
</script>
