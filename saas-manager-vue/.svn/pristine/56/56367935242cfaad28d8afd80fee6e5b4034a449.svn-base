<template>
  <div>
    <el-tabs type="border-card">
      <el-tab-pane label="修改信息">
        <el-card>
          <div class="title"><h3>登录用户信息</h3></div>
          <el-form
            label-position="right"
            :model="loginMsgForm"
            :rules="loginMsgRules"
            ref="ruleForm"
            label-width="100px"
          >
            <!-- 账号名称 -->
            <el-form-item label="账号名称:" prop="name">
              <el-input v-model="loginMsgForm.name"></el-input>
            </el-form-item>
            <!-- 注册邮箱 -->
            <el-form-item label="注册邮箱:">
              <span>{{ loginMsgForm.loginId }}</span>
            </el-form-item>
            <!-- 角色 -->
            <el-form-item label="角色:">
              <span>{{ loginMsgForm.role }}</span>
            </el-form-item>
            <!-- 公司名称 -->
            <el-form-item label="公司名称:" prop="company">
              <el-input v-model="loginMsgForm.company"></el-input>
            </el-form-item>
            <!-- 联系人 -->
            <el-form-item label="联系人:" prop="contact">
              <el-input v-model="loginMsgForm.contact"></el-input>
            </el-form-item>
            <!-- 联系方式 -->
            <el-form-item label="联系方式:" prop="mobile">
              <el-input v-model="loginMsgForm.mobile"></el-input>
            </el-form-item>
            <el-form-item label="主营应用:" prop="mainApp">
              <el-input v-model="loginMsgForm.mainApp"></el-input>
            </el-form-item>
            <el-form-item label="了解路径:" prop="learnWay">
              <!-- <el-input v-model="loginMsgForm.mainApp"></el-input> -->
              <el-select
                clearable
                style="width: 80%"
                placeholder="请选择了解途径"
                v-model="loginMsgForm.learnWay"
              >
                <el-option :value="1" :label="title + '官网'"></el-option>
                <el-option :value="2" :label="title + '公众号'"></el-option>
                <el-option :value="3" :label="title + '商务'"></el-option>
                <el-option :value="4" label="朋友推荐"></el-option>
                <el-option :value="5" label="网络文章"></el-option>
                <el-option :value="6" label="其他"></el-option>
              </el-select>
            </el-form-item>
          </el-form>

          <el-button
            type="primary"
            @click="handlEditMsg"
            style="margin-left: 48%"
            >修改</el-button
          >
        </el-card>
      </el-tab-pane>
      <el-tab-pane label="修改密码">
        <el-card>
          <div class="reset">
            <el-form
              ref="resetForm"
              :model="resetForm"
              :rules="resetRules"
              class="login-form"
              label-position="right"
              label-width="300px"
            >
              <!-- 账号 -->
              <el-form-item label="注册邮箱:">
                <span>{{ resetForm.email }}</span>

                <!-- <el-input
                  style="width: 20rem"
                  v-model="resetForm.email"
                  placeholder="请输入邮箱"
                  name="email"
                  type="text"
                >
                  <span slot="prefix" class="svg-container">
                    <svg-icon icon-class="email" /> </span
                >
                </el-input> -->
              </el-form-item>

              <!-- 密码 -->
              <el-form-item label="密码:" prop="password">
                <el-input
                  style="width: 20rem"
                  :key="passwordType1"
                  ref="password"
                  v-model="resetForm.password"
                  :type="passwordType1"
                  placeholder="密码"
                  name="password"
                >
                  <span slot="prefix" class="svg-container">
                    <svg-icon icon-class="password" />
                  </span>
                  <span slot="suffix" class="show-pwd" @click="showPwd(1)">
                    <svg-icon
                      :icon-class="
                        passwordType1 === 'password' ? 'eye' : 'eye-open'
                      "
                    /> </span
                ></el-input>
              </el-form-item>
              <el-form-item label="确认密码:" prop="confirmPassword">
                <el-input
                  style="width: 20rem"
                  :key="passwordType2"
                  ref="confirmPassword"
                  v-model="resetForm.confirmPassword"
                  :type="passwordType2"
                  placeholder="确认密码"
                  name="confirmPassword"
                >
                  <span slot="prefix" class="svg-container">
                    <svg-icon icon-class="password" />
                  </span>
                  <span slot="suffix" class="show-pwd" @click="showPwd(2)">
                    <svg-icon
                      :icon-class="
                        passwordType2 === 'password' ? 'eye' : 'eye-open'
                      "
                    /> </span
                ></el-input>
              </el-form-item>
              <el-form-item prop="code">
                <el-input
                  style="width: 10rem; display: inline-block"
                  placeholder="请输入验证码"
                  v-model="resetForm.code"
                ></el-input>
                <el-button
                  style="display: inline-block"
                  v-show="!waittime"
                  size="medium"
                  type="primary "
                  @click="postMsg"
                  :loading="waittime"
                  >获取验证码</el-button
                >
                <el-button
                  style="display: inline-block"
                  type="primary "
                  size="medium"
                  v-show="waittime"
                  disabled
                  >{{ count }}s后再获取</el-button
                >
              </el-form-item>

              <el-form-item label-width="380px">
                <el-button
                  type="primary"
                  style="margin-bottom: 30px"
                  :loading="loading"
                  @click.native.prevent="handleReset"
                >
                  修改
                </el-button></el-form-item
              >
            </el-form>
          </div>
        </el-card>
      </el-tab-pane>
    </el-tabs>
  </div>
</template>
<script>
import { updateAccountInfo } from "@/api/advanced";
import { sentEmail, resetPassword } from "@/api/user.js";

export default {
  data() {
    // 是否包含一位数字
    const regNumber = /(?=.*[\d])/;
    // 是否包含一位小写字母
    const regLetter = /(?=.*[a-z])/;
    // 是否包含一位大写字母
    const regLetters = /(?=.*[A-Z])/;
    // 是否包含一位特殊字符
    const regCharacter =
      /(?=.*[`~!@#$%^&*()_\-+=<>?:"{}|,.\/;'\\[\]·~！@#￥%……&*（）——\-+={}|《》？：“”【】、；‘’，。、])/;

    const validateCode = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("请输入验证码！"));
      } else {
        callback();
      }
    };
    const validatePassword = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("新密码不能为空！请重新输入"));
      } else {
        if (value.length > 16) {
          callback(new Error("密码长度不超过16个字符。"));
        } else if (value.length < 8) {
          callback(new Error("密码不低于8位，包含大小字母、数字、特殊符号"));
        } else {
          if (!/^[a-zA-Z\d]{1}/.test(value)) {
            callback(new Error("密码必须以英文大小写字母或数字开头！"));
          } else {
            if (!regNumber.test(value)) {
              callback(
                new Error("密码不低于8位，包含大小字母、数字、特殊符号!")
              );
              // callback(new Error("密码必须包含一位数字!"));
            } else if (!regLetter.test(value)) {
              callback(
                new Error("密码不低于8位，包含大小字母、数字、特殊符号!")
              );
              // callback(new Error("密码必须包含一位小写字母!"));
            } else if (!regLetters.test(value)) {
              callback(
                new Error("密码不低于8位，包含大小字母、数字、特殊符号!")
              );
              // callback(new Error("密码必须包含一位大写字母!"));
            } else if (!regCharacter.test(value)) {
              callback(
                new Error("密码不低于8位，包含大小字母、数字、特殊符号!")
              );
              // callback(new Error("密码必须包含一位特殊字符!"));
            } else {
              callback();
            }
          }
        }
      }
    };
    const validateconfirm = (rule, value, callback) => {
      if (value.length === 0) {
        callback(new Error("请确认密码"));
      } else {
        if (this.resetForm.password !== value) {
          callback(new Error("确认密码错误！"));
        } else {
          callback();
        }
      }
    };
    return {
      // 修改用户信息
      loginMsgForm: {
        name: "",
        loginId: "",
        role: "",
        sts: "",
        company: "",
        contact: "",
        mobile: "",
        mainApp: "",
        learnWay: "",
      },
      // 修改用户信息rules
      loginMsgRules: {
        name: [{ required: true, message: "请输入账号名称", trigger: "blur" }],
        company: [
          { required: true, message: "请输入公司名称", trigger: "blur" },
        ],
        contact: [{ required: true, message: "请输入联系人", trigger: "blur" }],
        mobile: [
          {
            required: true,
            message: "请填写手机号",
            trigger: "blur",
          },
          {
            message: "手机号无效",
            trigger: "blur",
            pattern: /^(13\d|14[579]|15[^4\D]|17[^49\D]|18\d)\d{8}$/,
          },
        ],
      },

      // 修改密码表单
      resetForm: {
        code: "",
        email: this.$store.state.user.loginId,
        password: "",
        confirmPassword: "",
      },
      // 密码可看icon
      passwordType1: "password",
      passwordType2: "password",
      // 按钮loading
      loading: false,
      // 计时按钮显示
      waittime: false,
      // 倒计时时间
      count: 60,
      // 计时器
      timer: null,
      // 修改密码规则验证
      resetRules: {
        code: [{ required: true, trigger: "blur", validator: validateCode }],
        password: [
          { required: true, trigger: "blur", validator: validatePassword },
        ],
        confirmPassword: [
          { required: true, trigger: "blur", validator: validateconfirm },
        ],
        email: [
          { required: true, message: "请填写邮箱", trigger: "blur" },
          {
            message: "邮箱无效",
            pattern: /^\w+@[a-z0-9]+\.[a-z]{2,4}$/,
            trigger: "blur",
          },
        ],
      },
    };
  },
  mounted() {
    this.getUserMsg();
  },
  computed: {
    title() {
      return this.$store.getters.title;
    },
  },
  methods: {
    // 获取用户信息
    getUserMsg() {
      let roles = this.$store.state.user.roles[0];
      if (roles === "SUPER_ADMIN") {
        roles = "超级管理员";
      } else if (roles === "ADMIN") {
        roles = "管理员";
      } else if (roles === "OPERATOR") {
        roles = "运营";
      } else if (roles === "VIEWER") {
        roles = "报表";
      } else if (roles === "AUDITOR") {
        roles = "审核员";
      } else if (roles === "BUSINESS") {
        roles = "商务";
      } else if (roles === "MEDIA") {
        roles = "媒体";
      }

      this.loginMsgForm.loginId = this.$store.state.user.loginId;
      this.loginMsgForm.name = this.$store.state.user.username;
      this.loginMsgForm.company = this.$store.state.user.company;
      this.loginMsgForm.contact = this.$store.state.user.contact;
      this.loginMsgForm.mobile = this.$store.state.user.mobile;
      this.loginMsgForm.mainApp = this.$store.state.user.mainApp;
      this.loginMsgForm.learnWay =
        this.$store.state.user.learnWay == 0
          ? ""
          : this.$store.state.user.learnWay;
      this.loginMsgForm.role = roles;
    },
    // 修改用户信息按钮
    handlEditMsg() {
      this.$refs["ruleForm"].validate(async (val) => {
        if (!val) return;
        let loginMsgForm = JSON.parse(JSON.stringify(this.loginMsgForm));
        if (loginMsgForm.role === "超级管理员") {
          loginMsgForm.role = 1;
        } else if (loginMsgForm.role === "管理员") {
          loginMsgForm.role = 2;
        } else if (loginMsgForm.role === "运营") {
          loginMsgForm.role = 3;
        } else if (loginMsgForm.role === "报表") {
          loginMsgForm.role = 4;
        } else if (loginMsgForm.role === "审核员") {
          loginMsgForm.role = 5;
        } else if (loginMsgForm.role === "商务") {
          loginMsgForm.role = 6;
        } else if (loginMsgForm.role === "媒体") {
          loginMsgForm.role = 7;
        }

        const res = await updateAccountInfo(loginMsgForm);
        if (res.code != 200) return this.$message.error(res.msg);
        await this.$store.dispatch("user/getInfo");
        this.getUserMsg();
        this.$message.success(res.msg);
      });
    },
    // 提交按钮
    handleReset() {},
    // 发送验证码按钮
    postCodeMES() {},
    showPwd(val) {
      if (val === 1) {
        if (this.passwordType1 === "password") {
          this.passwordType1 = "";
        } else {
          this.passwordType1 = "password";
        }
        this.$nextTick(() => {
          this.$refs.password.focus();
        });
      } else if (val === 2) {
        if (this.passwordType2 === "password") {
          this.passwordType2 = "";
        } else {
          this.passwordType2 = "password";
        }
        this.$nextTick(() => {
          this.$refs.confirmPassword.focus();
        });
      }
    },
    postMsg() {
      // if (this.resetForm.email.trim() === "") {
      //   this.$message.error("请输入邮箱");
      //   return;
      // }

      sentEmail(this.$store.state.user.loginId).then((resp) => {
        if (resp.code !== 200) return;
        let TIME_COUNT = 60;
        this.waittime = true;
        this.timer = setInterval(() => {
          if (this.count > 0 && this.count <= TIME_COUNT) {
            this.count--;
          } else {
            this.waittime = false;
            clearInterval(this.timer);
            this.timer = null;
          }
        }, 1000);
      });
    },
    tologin() {
      this.$emit("tologin");
    },
    async handleReset() {
      if (this.resetForm.password !== this.resetForm.confirmPassword) {
        this.$message.error("确认密码不正确");
        return;
      }
      this.$refs.resetForm.validate((valid) => {
        if (valid) {
          resetPassword(this.resetForm).then((resp) => {
            if (resp.code !== 200) return;
            this.$message.success("修改成功！");
            this.tologin();
          });
        } else {
          console.log("error submit!!");
          return false;
        }
      });
    },
  },
};
</script>
<style lang="scss" scoped>
.el-card {
  width: 80%;
  margin: 30px auto;
  padding: 0 50px;
  box-sizing: border-box;
  .msg {
    width: 100%;
    // height: 500px;
    // background-color: chocolate;
    .item {
      display: flex;
      align-items: center;
      height: 40px;
      //   background-color: cornflowerblue;
      margin-bottom: 20px;
      text-align: left;
      .item_one {
        width: 100px;
      }
    }
  }
  .title {
    margin-bottom: 50px;
  }
  .row_one {
    display: flex;
    justify-content: center;
    margin-top: 40px;
  }
}
</style>
