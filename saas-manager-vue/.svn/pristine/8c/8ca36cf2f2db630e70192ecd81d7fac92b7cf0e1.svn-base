<template>
  <div class="batch-add-container">
    <div class="header">
      <span class="goback" @click="goback"><i class="el-icon-back">返回</i></span>
      <h3>批量导入代码位</h3>
    </div>
    <!-- 内容区 -->
    <div class="content">
      <!-- 表头标题 -->
      <div class="title">
        <div class="title_app">
          <div class="image">
            <el-image
              :src="iconUrl ? getCreativeUrl(iconUrl) : '/images/app-none.png'"
              :fit="'fill'"
            />
          </div>
          <div class="titlebox">
            <p class="name">
              <span class="label">
                <svg-icon
                  :icon-class="os === 1 ? 'android' : os === 0 ? 'ios' : ''"
                />{{ appName }}</span>
            </p>
            <p class="id"><span class="label" />{{ appId }}</p>
          </div>
        </div>
        <div class="title_place">
          <div class="titlebox">
            <p class="name">
              <span class="label">{{ placeName }}</span>
            </p>
            <p class="id">
              <span class="label">{{ placeId }}</span>
            </p>
          </div>
        </div>
        <div class="title_position">
          <div class="titlebox">
            <p class="name position">
              <span class="label">{{ positionName }}</span>
            </p>
          </div>
        </div>
      </div>
      <!-- 广告源 -->
      <div v-if="appId" class="platform">
        <div class="label">广告源：</div>
        <div class="platformbox">
          <AppPlatform
            class="appplatform"
            :is-batch="true"
            :app-id="appId"
            :linked-show="false"
            :active="null"
            :disabled="false"
            :is-edit="false"
            @getplatrow="getplatrow"
          />
        </div>
      </div>
    </div>

    <div class="export_btn">
      <el-form
        ref="form"
        :model="query"
        label-width="120px"
        label-position="left"
        :rules="rules"
      >
        <el-form-item v-if="platName" label="下载模板">
          <div class="download_btn">
            <el-button
              :loading="downLoading"
              size="small"
              type="primary"
              @click="handleDownload"
            >
              下载【{{ platName }}】模板
            </el-button>
          </div>
        </el-form-item>
        <el-form-item label="文件上传" prop="fileList">
          <el-upload
            ref="upload"
            accept=".xlsx"
            action=""
            :with-credentials="true"
            :http-request="httpRequest"
            :on-change="uploadFile"
            :on-remove="removeFile"
            :file-list="query.fileList"
            :auto-upload="false"
            :limit="1"
          >
            <el-button slot="trigger" size="small" type="success">
              选取文件
            </el-button>
            <div
              slot="tip"
              class="el-upload__tip"
              style="display: inline-block; margin-left: 20px"
            >
              只能上传xlsx格式的 excel文件
            </div>
          </el-upload>
        </el-form-item>
      </el-form>
    </div>
    <div class="submit_btn">
      <el-button
        type="primary"
        :disabled="query.fileList.length == 0"
        @click="handleSubmit"
      >
        提交
      </el-button>
    </div>
  </div>
</template>

<script>
import AppPlatform from '@/components/Platform'
import { getAppInfoById } from '@/api/aggregate'
import { getAccounts } from '@/api/plat'
import excel from '@/utils/1'
import request from '@/utils/request'

export default {
  name: 'BatchAdd',
  components: {
    AppPlatform
  },
  data() {
    return {
      query: { fileList: [] },
      appId: '',
      appName: '',
      placeId: '',
      placeName: '',
      positionId: '',
      positionName: '',
      iconUrl: '',
      os: '',
      settleType: '',
      platName: '',
      platId: '',
      testId: '',
      groupId: '',
      editplatquery: {
        platAccountId: '',
        platId: '',
        platAppId: '',
        appKey: '',
        appId: '',
        id: '',
        accessType: ''
      },

      rules: {
        fileList: [{ required: true, message: '请上传文件' }]
      },

      downLoading: false
    }
  },
  computed: {},
  mounted() {
    if (this.$route.query) {
      this.appId = this.$route.query.appId ? this.$route.query.appId : ''
      this.placeId = this.$route.query.placeId ? this.$route.query.placeId : ''
      this.groupId = this.$route.query.groupId ? this.$route.query.groupId : ''
      this.testId = this.$route.query.testId ? this.$route.query.testId : ''
    }
    this.getAppInfoById()
  },
  methods: {
    getAccounts(plat) {
      getAccounts(plat).then((res) => {
        this.accounts = res.data
      })
    },
    async getAppInfoById() {
      let resp = await getAppInfoById({
        id: this.appId,
        placeId: this.placeId
      })
      this.appName = resp.data[0] ? resp.data[0].name : ''
      this.placeName = resp.data[0] ? resp.data[0].placeName : ''
      this.positionId = resp.data[0] ? resp.data[0].position : ''
      this.positionName = resp.data[0] ? resp.data[0].positionName : ''
      this.iconUrl = resp.data[0] ? resp.data[0].iconUrl : ''
      this.os = resp.data[0] ? resp.data[0].os : ''
    },
    getCreativeUrl(url) {
      if (url) {
        return this.$store.getters.resourceUrl + url
      } else {
        return null
      }
    },

    getplatrow(row) {
      this.getAccounts(row.id)
      this.platId = row.id
      this.platName = row.name
      this.settleType = row.settleType
      this.editplatquery = {
        name: row.name,
        appId: this.appId,
        platAccountId: row.platAccountId,
        platId: row.id,
        platAppId: row.platAppId,
        appKey: row.appKey,
        accessType: row.accessType
      }
    },
    goback() {
      this.$router.push({
        path: '/traffic/aggregate',
        query: { appId: this.appId, placeId: this.placeId }
      })
    },

    async handleDownload() {
      this.downLoading = true
      try {
        const res = await this.exportToExcel()
        await excel(res, `【${this.platName}】代码位模板.xlsx`)
        this.downLoading = false
      } catch (e) {
        console.log(e, '导出excel错误信息')
        this.downLoading = false
      }
    },
    exportToExcel() {
      return request.post(
        '/aggregate/downloadAdsourceTemplate',
        { platId: this.platId },
        {
          responseType: 'blob'
        }
      )
    },
    uploadFile(file) {
      this.query.fileList = []
      this.query.fileList[0] = file
    },
    removeFile(file) {
      this.query.fileList = []
    },

    // param是自带参数。 this.$refs.upload.submit() 会自动调用 httpRequest方法.在里面取得file
    httpRequest(param) {
      let fileObj = param.file // 相当于input里取得的files
      console.log(fileObj)
      let fd = new FormData() // FormData 对象
      fd.append('file', fileObj) // 文件对象
      let parameter = {
        placeId: this.placeId,
        platId: this.platId,
        groupId: this.groupId,
        testId: this.testId
      }
      fd.append('parameter', JSON.stringify(parameter))

      let url = '/aggregate/bulkImportAdsource'
      let config = {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }
      request.post(url, fd, config).then((res) => {
        if (res.code == 200) {
          this.$message.success('导入成功！')
          this.goback()
        }
      })
    },

    handleSubmit() {
      if (!this.platId) {
        this.$message.error('请选择广告源！')
      }
      this.$refs.form.validate(async(valid) => {
        if (!valid) return
        this.$refs.upload.submit()
      })
    }
  }
}
</script>

<style lang="scss" scoped>
.batch-add-container {
  width: 100%;
  background-color: #fff;
  .header {
    padding: 10px;
    display: flex;
    .goback {
      font-size: 16px;
      margin-right: 30px;
      cursor: pointer;
      h3 {
        font-size: 16px;
      }
      &:hover {
        color: blue;
      }
    }
  }
  .appplatform {
    margin-bottom: 20px;
  }
  .content {
    padding-left: 30px;
    width: 100%;
    .title {
      margin-top: 30px;
      width: 100%;
      display: flex;
      .title_app,
      .title_place {
        line-height: 50px;
        width: 320px;
        height: 50px;
        display: flex;
        align-items: center;
        .image {
          width: 40px;
          height: 40px;
          overflow: hidden;
          margin-right: 5px;
        }
      }
      .titlebox {
        .name {
          font-size: 14px;
          line-height: 30px;
        }
        .id {
          font-size: 13px;
          line-height: 20px;
        }

        .name.position {
          line-height: 50px;
        }
      }
    }
    .platform {
      margin-top: 40px;
      display: flex;
      .label {
        width: 6%;
        color: #666;
      }
      .platformbox {
        width: 90%;
      }
    }
  }

  .export_btn {
    margin-left: 30px;
    width: 400px;
    margin-top: 30px;
  }
  .submit_btn {
    width: 100%;
    display: flex;
    justify-content: center;
    padding-bottom: 30px;
  }
}
</style>
