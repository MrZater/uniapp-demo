<template>
  <div class="add-message-container">
    <div
      class="goback"
      @click="goback"
    >
      <p><i class="el-icon-back" />返回</p>
    </div>
    <div class="messagetype">
      <p>消息类型</p>
      ：
      <el-select
        v-model="query.type"
        placeholder="请选择消息类型"
      >
        <el-option
          label="平台通知"
          :value="1"
        />
        <el-option
          label="功能更新"
          :value="2"
        />
        <el-option
          label="运营活动"
          :value="3"
        />
      </el-select>
    </div>
    <div class="title">
      <p>标题</p>
      ：
      <el-input
        v-model="query.title"
        style="width: 400px"
        placeholder="请输入标题"
      />
    </div>

    <div class="editor">
      <p>内容</p>
      ：
      <div class="wrapper">
        <div class="editor-box">
          <!-- 创建工具栏 -->
          <Toolbar
            ref="editor"
            style="border-bottom: 1px solid #ccc"
            :editor-id="editorId"
            :default-config="toolbarConfig"
            :mode="mode"
          />
          <!-- 创建编辑区 -->
          <!-- :defaultContent="defaultContent" -->
          <Editor
            style="height: 500px; overflow-y: hidden"
            :editor-id="editorId"
            :default-config="editorConfig"
            :default-html="defaultHtml"
            :mode="mode"
            @onChange="onChange"
          />
        </div>
      </div>
    </div>
    <div class="publish">
      <p>发布类型</p>
      ：
      <el-radio-group
        v-model="query.publishType"
        size="small"
      >
        <el-radio-button :label="0">
          立即发布
        </el-radio-button>
        <el-radio-button :label="1">
          定时发布
        </el-radio-button>
      </el-radio-group>
    </div>
    <div
      v-if="query.publishType == 1"
      class="time"
    >
      <p>发布时间</p>
      ：
      <el-date-picker
        v-model="query.publishTime"
        :picker-options="pickerOptions"
        :clearable="false"
        type="datetime"
        value-format="yyyy-MM-dd HH:mm:ss"
        placeholder="选择发布时间"
      />
    </div>
    <div class="sumbit">
      <div class="btn">
        <el-button
          type=""
          @click="handleClear"
        >
          重置
        </el-button>
        <el-button
          v-if="allowOperate"
          type="primary"
          @click="handleEditMessage"
        >
          {{
            model == "add" ? "确定" : model == "edit" ? "修改" : ""
          }}
        </el-button>
      </div>
    </div>
  </div>
</template>

<script>
import {
  createEditor
} from '@wangeditor/editor'
import '@wangeditor/editor/dist/css/style.css'
import {
  Editor,
  Toolbar,
  getEditor,
  removeEditor
} from '@wangeditor/editor-for-vue'
import { addMessage, editMessage } from '@/api/message.js'

export default {
  name: 'AddMessage',
  components: { Editor, Toolbar },
  props: {
    rowinfo: Object,
    model: String
  },
  data() {
    return {
      editor: null,
      query: {
        type: '',
        content: '',
        title: '',
        publishType: 0,
        publishTime: ''
      },
      pickerOptions: {
        disabledDate(time) {
          return time.getTime() < Date.now() - 1000 * 60 * 60 * 24
        }
      },
      editorId: `w-e-${Math.random().toString().slice(-5)}`, // 【注意】编辑器 id ，要全局唯一
      toolbarConfig: {
        excludeKeys: [
          // "emotion", // 排除菜单组，写菜单组 key 的值即可
          // "insertTable",
          // "deleteTable",
          'insertVideo',
          'uploadVideo'
        ]
      },
      editorConfig: {
        placeholder: '请输入内容...',
        MENU_CONF: {
          // 图片上传配置
          uploadImage: {
            // form-data fieldName
            fieldName: 'file',
            // 上传地址
            server: process.env.VUE_APP_BASE_API + '/common/upload',
            // 小于该大小转为base64
            base64LimitSize: 1024,
            // 头信息
            headers: {
              Authorization: this.$store.getters.token
            },
            // 限制文件大小
            maxFileSize: 1 * 1024 * 1024, // 1M
            // 图片最大上传数量
            maxNumberOfFiles: 10,
            // 文件类型
            allowedFileTypes: ['image/*'],
            // 由于所需响应不同，需要自定义插入图片
            customInsert(res, insertFn) {
              let url = 'http://creative.medproad.com/material/' + res.data
              insertFn(url, '', '')
            }
          }
          // uploadVideo: {},
        }
      },
      mode: 'default', // or 'simple'
      // mode: 'simple',
      // defaultContent （JSON 格式） 和 defaultHtml（HTML 格式）二选一
      // defaultContent: [{ type: "paragraph", children: [{ text: "一行文字" }] }],
      defaultHtml: ``
    }
  },
  computed: {
    allowOperate() {
      return this.$store.getters.allowOperate
    }
  },

  async mounted() {
    this.editor = await createEditor({ customConfig: { menus: ['head'] }})
    this.query = JSON.parse(JSON.stringify(this.rowinfo))
    this.randerContent()
  },

  beforeDestroy() {
    const editor = getEditor(this.editorId)
    if (editor == null) return

    // 【注意】组件销毁时，及时销毁编辑器
    editor.destroy()
    removeEditor(this.editorId)
  },
  methods: {
    onChange(editor) {
      const e = createEditor({ content: editor.children })
      this.query.content = e.getHtml()
    },
    async handleEditMessage() {
      if (this.query.publishType == 0) {
        this.query.publishTime = this.getNowDate()
      }
      if (!this.query.type) {
        this.$message.error('请选择消息类型！')
        return
      }
      if (!this.query.title) {
        this.$message.error('请输入标题！')
        return
      }
      if (this.query.publishType == 1 && !this.query.publishTime) {
        this.$message.error('请选择发布时间！')
        return
      }
      if (this.model == 'add') {
        let resp = await addMessage(this.query)
        if (resp.code !== 200) return
        this.$message.success('新增成功！')
        // this.$store.commit("user/SET_UNREADMESSAGE", "1");
      } else if (this.model == 'edit') {
        let resp = await editMessage(this.query)
        if (resp.code !== 200) return
        this.$message.success('修改成功！')
        // if (resp.data.unReadMessage == 1) {
        //   this.$store.commit("user/SET_UNREADMESSAGE", "0");
        // } else {
        //   this.$store.commit("user/SET_UNREADMESSAGE", "1");
        // }
      }
      this.$store.dispatch('user/getInfo')

      this.$emit('handleEdit')
    },
    getNowDate() {
      let date = new Date()
      let y = date.getFullYear()
      let m =
        date.getMonth() + 1 >= 10
          ? date.getMonth() + 1
          : '0' + (date.getMonth() + 1)
      let d = date.getDate() >= 10 ? date.getDate() : '0' + date.getDate()
      let h = date.getHours() >= 10 ? date.getHours() : '0' + date.getHours()
      let min =
        date.getMinutes() >= 10 ? date.getMinutes() : '0' + date.getMinutes()
      let s =
        date.getSeconds() >= 10 ? date.getSeconds() : '0' + date.getSeconds()

      return `${y}-${m}-${d} ${h}:${min}:${s}`
    },
    randerContent() {
      getEditor(this.editorId).clear()
      getEditor(this.editorId).dangerouslyInsertHtml(this.query.content)
    },
    handleClear() {
      this.query = {
        type: '',
        content: '',
        title: '',
        publishType: 0,
        publishTime: ''
      }
      getEditor(this.editorId).clear()
    },
    goback() {
      this.$emit('goback')
    }
  }
}
</script>

<style lang="scss" scoped>
.add-message-container {
  width: 100%;
  background-color: #fff;
  padding: 15px 0;
  margin: 10px 0px 50px 0px;
  .goback {
    margin: 0px 0 40px 20px;
    color: cornflowerblue;
    cursor: pointer;
    &:hover {
      color: rgb(30, 100, 231);
    }
  }
  // height: 1000px;
  .messagetype,
  .title,
  .editor,
  .publish,
  .time {
    height: 35px;
    line-height: 35px;
    display: flex;
    margin: 10px 20px 20px 20px;
    background-color: #fff;
    p {
      width: 100px;
      font-size: 16px;
      margin: 0;
      padding: 0;
      // display: flex;
      // justify-content: space-around;
      text-align: justify;
      text-align-last: justify;
    }
  }
  .editor {
    height: 37rem;
  }
  .wrapper {
    width: 95%;
    .editor-box {
      // width: 90%;
      // margin: 0 20px;
      z-index: 10000; /* 如有需要，可以自定义 z-index */
      padding: 10px 20px;
      background-color: #fff;
      border: 1px solid #ccc;
    }
  }
  .sumbit {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
}
</style>
