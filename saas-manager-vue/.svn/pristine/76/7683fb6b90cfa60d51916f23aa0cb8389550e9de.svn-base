<template>
  <div
    class="login-container"
    :style="{
      backgroundImage: 'url(images/login_bg.png )',
    }"
  >
    <!-- 登录 -->
    <div class="title-container">
      <div style="text-align: center">
        <img
          v-if="isMedPro"
          class="logoimg"
          style="width: 200px"
          draggable="false"
          :src="origin + '/dynamic_logo.png'"
        />
        <img
          v-if="!isMedPro"
          class="logoimg"
          style="width: 200px"
          draggable="false"
          :src="'/images/login_logo.png'"
        />
      </div>
    </div>
    <div v-if="isLogin" class="login">
      <el-form
        ref="loginForm"
        :model="loginForm"
        :rules="loginRules"
        class="login-form"
        autocomplete="on"
        label-position="left"
      >
        <!-- 账号 -->
        <el-form-item prop="username">
          <span class="svg-container">
            <svg-icon icon-class="user" />
          </span>
          <el-input
            ref="username"
            v-model="loginForm.username"
            placeholder="请输入注册邮箱"
            name="username"
            type="text"
            tabindex="1"
            autocomplete="on"
          ></el-input>
        </el-form-item>

        <el-tooltip
          v-model="capsTooltip"
          content="Caps lock is On"
          placement="right"
          manual
        >
          <!-- 密码 -->
          <el-form-item prop="password">
            <span class="svg-container">
              <svg-icon icon-class="password" />
            </span>
            <el-input
              :key="passwordType"
              ref="password"
              v-model="loginForm.password"
              :type="passwordType"
              placeholder="密码"
              name="password"
              tabindex="2"
              autocomplete="on"
              @keyup.native="checkCapslock"
              @blur="capsTooltip = false"
              @keyup.enter.native="handleLogin"
            />
            <span v-if="!formMember" class="show-pwd" @click="showPwd">
              <svg-icon
                :icon-class="passwordType === 'password' ? 'eye' : 'eye-open'"
              />
            </span>
          </el-form-item>
        </el-tooltip>
        <el-form-item prop="code" style="background: none">
          <div class="codeimg">
            <div class="codeinput">
              <el-input
                v-model="loginForm.code"
                placeholder="验证码"
                clearable
                @keyup.enter.native="handleLogin"
              ></el-input>
            </div>

            <div class="login-code">
              <img :src="codeUrl" @click="getCode" />
            </div>
          </div>
        </el-form-item>
        <!-- 记住密码 -->
        <div class="remember">
          <el-checkbox v-model="isremember" size="medium"
            ><span style="color: #000">记住密码</span></el-checkbox
          >
        </div>

        <el-button
          type="primary"
          style="
            height: 47px;
            width: 100%;
            margin-bottom: 30px;
            background-color: #3f62ba;
            margin-top: 10px;
          "
          :loading="loading"
          @click.native.prevent="handleLogin"
        >
          登录
        </el-button>
        <div class="logintoother">
          <div class="toregist" v-if="allowRegister">
            没有账号？
            <router-link style="color: #3f62ba" to="/register">
              去注册
            </router-link>
          </div>

          <div class="toreset">
            <a href="#" @click="isLogin = false" style="color: #3f62ba"
              >忘记密码</a
            >
          </div>
        </div>
      </el-form>
    </div>
    <div v-else class="restpwd">
      <resetPwd @tologin="tologin"></resetPwd>
    </div>
  </div>
</template>

<script>
import { getCodeImg } from "@/api/user";
import resetPwd from "./resetPwd.vue";
// import { Encrypt, Decrypt } from "@/utils/secret";
import { Encrypt, Decrypt } from "@/utils/jsencrypt";
import { remembPwd } from "@/utils/rememb";
export default {
  name: "Login",
  components: { resetPwd },
  data() {
    const validateUsername = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("请输入注册邮箱！"));
      } else {
        callback();
      }
    };
    const validatePassword = (rule, value, callback) => {
      if (value.length === 0) {
        callback(new Error("密码不能为空！"));
      } else {
        callback();
      }
    };
    return {
      env: process.env.NODE_ENV,
      isremember: false,
      isLogin: true,
      userinfoList: [],
      // 登录表单
      loginForm: {
        // 用户名
        username: "",
        // 密码
        password: "",
        uuid: "",
        code: "",
      },
      // 登录规则验证
      loginRules: {
        username: [
          { required: true, trigger: "blur", validator: validateUsername },
        ],
        password: [
          { required: true, trigger: "blur", validator: validatePassword },
        ],
        code: [{ required: true, trigger: "blur", message: "请输入验证码" }],
      },
      passwordType: "password",
      capsTooltip: false,
      loading: false,
      showDialog: false,
      redirect: undefined,
      otherQuery: {},
      codeUrl: "",
      formMember: false,
    };
  },
  computed: {
    origin() {
      return this.$store.getters.origin;
    },
    allowRegister() {
      return this.$store.getters.allowRegister;
    },
    isMedPro() {
      return this.$store.getters.isMedPro;
    },
  },
  //
  watch: {
    $route: {
      handler: function (route) {
        const query = route.query;
        if (query) {
          this.redirect = query.redirect;
          this.otherQuery = this.getOtherQuery(query);
        }
      },
      immediate: true,
    },
  },
  async created() {},
  mounted() {
    if (!localStorage.getItem("userinfo_0413")) {
      console.log("无用户");
    } else if (
      localStorage.getItem("userinfo_0413") &&
      JSON.parse(localStorage.getItem("userinfo_0413")).length > 0
    ) {
      this.formMember = true;
      this.isremember = true;
      this.loginForm.username = JSON.parse(
        localStorage.getItem("userinfo_0413")
      )[0].username;
      this.loginForm.password = JSON.parse(
        localStorage.getItem("userinfo_0413")
      )[0].password;

      this.loginForm = JSON.parse(localStorage.getItem("userinfo_0413"))[0];
      this.userinfoList = JSON.parse(localStorage.getItem("userinfo_0413"));
    }
    if (this.loginForm.username === "") {
      this.$refs.username.focus();
    } else if (this.loginForm.password === "") {
      this.$refs.password.focus();
    }
    this.getCode();
  },
  watch: {
    "loginForm.username": {
      handler(val) {
        if (val == "") {
          // 用户名为空，清空密码，记住密码标识改为false
          this.loginForm.password = "";
          this.formMember = false;
        } else {
          // 用户名有值，循环遍历被记住的用户列表
          let norememb = true; // 用户是否被记住是否
          this.userinfoList.forEach((item) => {
            if (item.username == val) {
              // 该用户被记住
              norememb = false;
              // 记住密码标识为true
              this.formMember = true;
              // 填充密码
              this.loginForm.password = item.password;
            }
          });
          // 若是未被记住的用户
          if (norememb) {
            // 改变标识
            this.formMember = false;
            this.loginForm.password = "";
          }
          this.passwordType = "password";
        }
      },
    },
    "loginForm.password": {
      handler(val, oldval) {
        let norememb = true;
        this.userinfoList.forEach((item) => {
          // 若密码和账户都为记住的值，则改记住标识为true
          if (
            item.password == val &&
            item.username == this.loginForm.username
          ) {
            this.formMember = true;
            norememb = false;
          }
          // 若被记住用户的密码框（记住的密码值oldval）被修改，则密码设为空
          if (
            item.password == oldval &&
            item.username == this.loginForm.username
          ) {
            this.loginForm.password = "";
          }
        });
        // 当前账户为未被记住的账户，记住标识为fasle
        if (norememb) {
          this.formMember = false;
        }
      },
    },
  },
  methods: {
    checkCapslock(e) {
      const { key } = e;
      this.capsTooltip = key && key.length === 1 && key >= "A" && key <= "Z";
    },
    showPwd() {
      if (this.passwordType === "password") {
        this.passwordType = "";
      } else {
        this.passwordType = "password";
      }
      this.$nextTick(() => {
        this.$refs.password.focus();
      });
    },
    handleLogin() {
      if (this.loading) {
        return;
      }
      this.$refs.loginForm.validate((valid) => {
        if (valid) {
          // setTimeout(() => {
          //   this.getCode()
          // }, 500);
          this.loading = true;
          let loginForm = JSON.parse(JSON.stringify(this.loginForm));
          if (!this.formMember) {
            // 不是缓存账号
            // 加密
            let secretPassword = Encrypt(this.loginForm.password);
            loginForm.password = secretPassword;
          }
          this.$store
            .dispatch("user/login", loginForm)
            .then(async (res) => {
              console.log(res);
              if (res.code == 10002) {
                this.$message({
                  message: res.msg,
                  type: "error",
                });
                this.getCode();
                this.loading = false;
              } else if (res.code == 200) {
                await this.$store.dispatch("user/getInfo");
                await remembPwd(this.isremember, loginForm);
                if (this.$store.getters.roles[0] === "AUDITOR") {
                  this.$router.push("/material/audit");
                } else if (this.$store.getters.roles[0] === "MEDIA") {
                  this.$router.push("/reportData/mediaReport");
                } else {
                  this.$router.push("/dashboard");
                }
                location.reload();
                this.loading = false;
              }
            })
            .catch(() => {
              this.loading = false;
            });
        } else {
          console.log("error submit!!");
          return false;
        }
      });
    },
    getOtherQuery(query) {
      return Object.keys(query).reduce((acc, cur) => {
        if (cur !== "redirect") {
          acc[cur] = query[cur];
        }
        return acc;
      }, {});
    },
    tologin() {
      this.isLogin = true;
      this.loginForm.username = "";
      this.loginForm.password = "";
    },
    // 获取验证图片
    getCode() {
      getCodeImg().then((res) => {
        this.codeUrl = "data:image/gif;base64," + res.data.img;
        this.loginForm.uuid = res.data.uuid;
      });
      this.$set(this.loginForm, "code", "");
    },
  },
};
</script>

<style lang="scss">
/* 修复input 背景不协调 和光标变色 */
/* Detail see https://github.com/PanJiaChen/vue-element-admin/pull/927 */

$bg: #c9c9c9;
$light_gray: #fff;
$cursor: #000;

@supports (-webkit-mask: none) and (not (cater-color: $cursor)) {
  .login-container .el-input input {
    color: $cursor;
  }
}

/* reset element-ui css */
.login-container {
  // filter: blur(10px);
  position: relative;

  .el-input {
    display: inline-block;
    height: 47px;
    width: 75%;

    input {
      background: transparent;
      border: 0px;
      -webkit-appearance: none;
      border-radius: 0px;
      padding: 12px 5px 12px 15px;
      color: #000;
      height: 47px;
      caret-color: $cursor;
      &::-webkit-input-placeholder {
        color: #999;
      }
      &:-webkit-autofill {
        box-shadow: 0 0 0px 1000px $bg inset !important;
        -webkit-text-fill-color: $cursor !important;
      }
    }
  }
  // 表单项
  .el-form-item {
    border: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    color: #454545;
  }
}
</style>

<style lang="scss" scoped>
$dark_gray: #889aa4;
$light_gray: #eee;

.login-container {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
  // background-image: url("~@/assets/login_bg.png");
  background-repeat: no-repeat;
  background-size: 100% 100%;
  margin-right: 3rem;
  .logoimg {
    position: absolute;
    top: 160px;
    right: 230px;
  }
  // 登录表单
  .login-form,
  .restpwd {
    background-color: #e0e0e0;
    padding: 30px;
    border-radius: 15px;
    position: absolute;
    right: 8rem;
    top: 10rem;
    width: 25rem;
    // height: 40%;
    overflow: hidden;
    margin-top: 4rem;
  }

  // 登录label
  .svg-container {
    padding: 6px 5px 6px 15px;
    color: $dark_gray;
    vertical-align: middle;
    width: 30px;
    display: inline-block;
  }

  // 密码可看
  .show-pwd {
    position: absolute;
    right: 10px;
    top: 7px;
    font-size: 16px;
    color: $dark_gray;
    cursor: pointer;
    user-select: none;
  }
  .rememmber {
    margin: 1000px;
  }

  // .thirdparty-button {
  //   position: absolute;
  //   right: 0;
  //   bottom: 6px;
  // }

  @media only screen and (max-width: 470px) {
    .thirdparty-button {
      display: none;
    }
  }
}
.logintoother {
  // border: 1px solid #000;
  height: 30px;
  // display: flex;
  // justify-content: space-between;
  // .toregist,
  // .toreset {
  //   width: 45%;
  // }
  // .toreset {
  //   a {
  //     margin-left: 50%;
  //   }
  // }
  .toregist {
    float: left;
  }
  .toreset {
    float: right;
  }
}
.codeimg {
  display: flex;

  .codeinput {
    position: relative;
    flex: 1;

    .el-input {
      width: 98%;
      background-color: #c9c9c9;
      border-radius: 5px;
    }
  }
  .login-code {
    width: 138px;
    height: 47px;

    img {
      height: 100%;
      width: 100%;
      border-radius: 5px;
      cursor: pointer;
    }
  }
}
</style>
